/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Testing;

import Entities.GameRoom;
import Entities.GameRoomCrud;
import Entities.Responce;
import Entities.Responce.responceCodes;
import Utils.AppManager;
import Utils.ConnectionManager;
import Utils.UserCrud;
import Utils.UserGameDetailsCrud;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.awt.EventQueue;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.WindowConstants;

/**
 *
 * @author A H M E D
 */
public class GameBordUi extends javax.swing.JFrame {

    /**
     * Creates new form GameBordUi
     */
    
    JButton[] buttons;
    GameRoomCrud gamebord;
   
    AppManager appManager;
    public GameBordUi(GameRoomCrud gamebord,AppManager appManager) {
        initComponents();
        this.gamebord = gamebord;
        buttons = new JButton[]{b1,b2,b3,b4,b5,b6,b7,b8,b9};
        this.appManager = appManager;
        
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        
        initListener();

        setTitle("Game Bord Test");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messages = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new java.awt.GridLayout(3, 3));

        b1.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b1.setName("1"); // NOI18N
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b1);

        b2.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b2.setName("2"); // NOI18N
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b2);

        b3.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b3.setName("3"); // NOI18N
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b3);

        b4.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b4.setName("4"); // NOI18N
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b4);

        b5.setFont(new java.awt.Font("Adobe Arabic", 0, 100)); // NOI18N
        b5.setName("5"); // NOI18N
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b5);

        b6.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b6.setName("6"); // NOI18N
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b6);

        b7.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b7.setName("7"); // NOI18N
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b7);

        b8.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b8.setName("8"); // NOI18N
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b8);

        b9.setFont(new java.awt.Font("Adobe Arabic", 0, 120)); // NOI18N
        b9.setName("9"); // NOI18N
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });
        jPanel2.add(b9);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, -2, 540, 340));

        messages.setColumns(20);
        messages.setRows(5);
        jScrollPane1.setViewportView(messages);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, 330, 150));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public void setMovieLisener(){
        gamebord.setMoveListenr(
            (String object) -> {
                
                EventQueue.invokeLater(()->{
                    messages.setText(
                        gamebord.gameRoom.currentPosition.toString()+
                        "::"+
                        gamebord.gameRoom.currentTurn.getPlayerSimbole().name()
                    );
                    gamebord.gameRoom.getGameBord().forEach((t, u) -> {
                        buttons[t-1].setText(u.name().toString());
                    });
                });
            },
                (String object) -> {
                EventQueue.invokeLater(()->{
                    messages.setText(gamebord.gameRoom.getPlayerStateWithId(appManager.getUser().getId()).name());
                    gamebord.gameRoom.getGameBord().forEach((t, u) -> {
                        buttons[t-1].setText(u.name().toString());
                    });
                });
            },
                (String object) -> {
                EventQueue.invokeLater(()->{
                    messages.setText("Draw");
                    gamebord.gameRoom.getGameBord().forEach((t, u) -> {
                        buttons[t-1].setText(u.name());
                    });
                });
            },
            (String object) -> {
            EventQueue.invokeLater(()->{
                messages.setText(object);
            });
            }
        );
    }
    
      public GameRoomCrud.ListenersX listener;
    
    public void initListener(){
        if(listener !=null) return;
        listener = new GameRoomCrud.ListenersX(
                    new GameRoomCrud.NotifierObject[]
                    {
                        new GameRoomCrud.NotifierObject(
                        (String object) -> {
                             gamebord.code = object;
                              EventQueue.invokeLater(()->{
                                messages.setText("create game with code "+object);
                            });
                        },
                        responceCodes.createGameRoom
                    ),
                    new GameRoomCrud.NotifierObject(
                        (String object) -> {
                              EventQueue.invokeLater(()->{
                                messages.setText("create game with code "+object);
                            });
                        },
                        responceCodes.createGameRoomError
                    ),
                        new GameRoomCrud.NotifierObject(
                            (String object) -> {
                                try {
                                 gamebord.gameRoom = gamebord.obm.readValue(object, GameRoom.class);
                                 
                                 EventQueue.invokeLater(()->{
                                    messages.setText("starting game "+gamebord.gameRoom.code);
                                });
                                } catch (JsonProcessingException ex) {
                                 Logger.getLogger(GameRoomCrud.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            },
                            Responce.responceCodes.startGame
                        ),
                        new GameRoomCrud.NotifierObject(
                            (String object) -> {
                                 EventQueue.invokeLater(()->{
                                    messages.setText("starting game");
                                });
                            },
                            Responce.responceCodes.startGameError
                        )
                    },
                false
                );
        
        gamebord.setListener(listener);
        setMovieLisener();
    }
    
    
    
    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b6ActionPerformed
         try {
            if(!gamebord.isReadyToPlay()) return;
            if(gamebord.gameRoom._getGameSate()==GameRoom.GameState.draw||gamebord.gameRoom._getGameSate()==GameRoom.GameState.winner) return;
            
            System.out.println(appManager);
            System.out.println(gamebord.gameRoom.currentTurn.getPlayer().getId());
            
            if(appManager.getUser().getId().equals(gamebord.gameRoom.currentTurn.getPlayer().getId()))
            gamebord.setMove(
                Integer.valueOf(((JButton)evt.getSource()).getName())
            );
        } catch (IOException ex) {
            Logger.getLogger(MainTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_b6ActionPerformed

    @Override
    public void dispose() {
        super.dispose();
        
        
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JButton b6;
    private javax.swing.JButton b7;
    private javax.swing.JButton b8;
    private javax.swing.JButton b9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea messages;
    // End of variables declaration//GEN-END:variables
}
